# Setting up ESLint and Prettier in a Next.js Project

This tutorial walks through implementing ESLint and Prettier in a Next.js project from scratch.

## What are ESLint and Prettier?

- **ESLint**: A tool that analyzes your code to find and fix problems. It helps maintain code quality by enforcing consistent coding styles and catching potential errors.
- **Prettier**: A code formatter that ensures consistent styling by automatically formatting your code according to predefined rules.

## Prerequisites

- Node.js installed on your machine
- Basic knowledge of JavaScript and React
- npm or yarn package manager

## Step 1: Create a New Next.js Project

If you don't already have a Next.js project, create one:

```bash
npx create-next-app@latest my-nextjs-app
cd my-nextjs-app
```

When prompted, you can choose TypeScript or JavaScript based on your preference.

## Step 2: ESLint Setup

### Good News! ESLint Comes Pre-configured

Since Next.js 11+, ESLint comes pre-configured. You can run:

```bash
npm run lint
```

### Customize ESLint Configuration

Create or modify `.eslintrc.json` in your project root:

```json
{
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended"
  ],
  "rules": {
    "no-unused-vars": "warn",
    "no-console": "warn"
  }
}
```

## Step 3: Prettier Setup

Install Prettier and its ESLint integration:

```bash
npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier
```

Create a `.prettierrc.json` file in your project root:

```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100,
  "bracketSpacing": true
}
```

## Step 4: Integrate ESLint with Prettier

Update your `.eslintrc.json` to use Prettier:

```json
{
  "extends": [
    "next/core-web-vitals",
    "eslint:recommended",
    "plugin:prettier/recommended"
  ],
  "plugins": ["prettier"],
  "rules": {
    "prettier/prettier": "error",
    "no-unused-vars": "warn",
    "no-console": "warn"
  }
}
```

## Step 5: Add Scripts to package.json

Update your `package.json` to include lint and format scripts:

```json
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
  "lint:fix": "eslint --fix .",
  "format": "prettier --write ."
}
```

## Step 6: Create .prettierignore and .eslintignore

Create `.prettierignore`:

```
node_modules
.next
build
public
```

Create `.eslintignore`:

```
node_modules
.next
build
public
```

## Step 7: Run Linting and Formatting

```bash
# Run ESLint
npm run lint

# Fix ESLint issues
npm run lint:fix

# Format code with Prettier
npm run format
```

## Step 8: Set Up VS Code Integration (Optional)

If you use VS Code, install the ESLint and Prettier extensions:

1. ESLint: `dbaeumer.vscode-eslint`
2. Prettier: `esbenp.prettier-vscode`

Create or update `.vscode/settings.json`:

```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
}
```

## Common ESLint Rules to Consider

```json
"rules": {
  "react/prop-types": "off",
  "react/react-in-jsx-scope": "off",
  "jsx-a11y/anchor-is-valid": "off",
  "no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
  "no-console": ["warn", { "allow": ["warn", "error"] }]
}
```

## Common Prettier Settings to Consider

```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100,
  "bracketSpacing": true,
  "jsxBracketSameLine": false,
  "arrowParens": "avoid"
}
```

## Troubleshooting

### ESLint and Prettier Conflicts

If you're experiencing conflicts between ESLint and Prettier, ensure:
1. The `eslint-config-prettier` is last in your extends array
2. You're using `plugin:prettier/recommended`

### Rules Not Being Applied

1. Try restarting your IDE
2. Check if files are being ignored by `.eslintignore` or `.prettierignore`
3. Run with `--debug` flag: `npx eslint --debug .`
